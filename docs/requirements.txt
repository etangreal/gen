___________________________________________________________________________________________________
Assignment:

Scenario:
	A company has a an R&D project to explore a web-sockets module-based architecture using NodeJS. 

Criteria to follow are the following:

	1 - server-client communication uses only JSON. 
		Client must be fully independent in creating user interface.
		The server does not push HTML fragments. 
		The server data-transmission technology should allow an easy interface with mobile clients 
		that could be native, web or hybrid. (for this test we only test a web client)
	2 - Qunit must be used to unit test the client side connecting to the server with a web socket (asynchronously).
	3 - Server side can use express in conjunction with with ws (https://www.npmjs.org/package/ws) and NOT socket.IO.
	4 - client side javascript does not use any abstraction web socket libraries but pure native web socket object.
	5 - no template libraries (ex: moustache, brackets or alike). Web-client must be pure jQuery.
	6 - no Bootstrap pollution. Just pure jQuery/javascript and handmade CSS.

The project should be able to:

	1 - client connects to server
	2 - server registers the client and store it into a connection list to be able to reopen a connection 
		if the client disconnects (page refresh, browser close and reopens).
	3 - client send a simple hello message with his name
	4 - server responds with a welcome message using the client username.
	5 - client disconnect and reconnect and the server send a welcome back message recognising the client 
		from the previous connection id.

PS: up to you to decide if local storage or cookies should be used to store client state.
	One option is also to use javascript fingerprint. 

A plus will be:

	1 - SCSS instead of CSS.
	2 - Code documentation with YUIDoc http://yui.github.io/yuidoc/ or similar for both client side and server side.
	3 - Unit testing for client side and server side.
	4 - NodeJS server implements a RESTful and Web-socket servers into one, so that I can use standard ajax or web sockets.

Schedule:
	Working 3 hour per day for 5 days should be enough to achieve the objectives. 
	If you need more time just let me know.

Marco
___________________________________________________________________________________________________
Feedback:

	I was looking at the current repo. 

	I expect the final project to be more simple in term of architecture. 

	No gulp, no virtualbox no vagrant. converting scss to css is a designer responsibility.

you should have:

	/public : html scss, css and client side javascript

	/src : server.js executable.

on index.html loading, the web socket connection must be immediate and automatic. on reload or on browser restart the index.html must be able to rebuild the state as it was before closing. So if you have the message on the screen:

	host: ws://localhost:8080/
	Connection opened...
	Message received...
	{"msg":"HELLO","type":"INIT","token":"da57f150-6590-11e4-8a4f-8d2f1b47a2cb","error":null}

on restart, I expect the same message to be recreated, a connection id must be persistent … maybe the message could say “Connection reopened” instead of “Connection opened”.

Marco
__________________________________________________________________________________________________
Response:

There is one use case I'm not sure about though - and that is how to manage a dead connection...
	For example if the server restarts, the client does not know the connection is dead - and subsequently has no "onclose" event.
	Subsequently when the client tries to send a message, it simply gets no response...

I'm also still working on one of the test-cases async testing the websocket which gives me an error - not sure why tho.

Ernst
__________________________________________________________________________________________________
Response:

When the server crash the client web-socket triggers an onError event with an “abnormal closing” error code. That might be used to “suppose” that the server is not available now but might be available in a short time. 
An heartbeat mechanism can be triggered when the onError (no connection) is triggered and every 3 seconds the the client try to reconnect. 

Marco
___________________________________________________________________________________________________
Response:

Yes thats what I was hoping for - however the onError doesn't seem to trigger in this case... although I might have done something wrong :p.
Ah yes heartbeat might work nicely, or perhaps a timeout on the message response (after which you just reopen the connection). Will try it :)

Ernst
___________________________________________________________________________________________________


